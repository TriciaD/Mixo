import naoqiimport timeimport almathimport mathNIp = "10.16.96.41"PORT = 9559period = 50motion = naoqi.ALProxy("ALMotion", NIp, PORT)posture = naoqi.ALProxy("ALRobotPosture", NIp, PORT)tts = naoqi.ALProxy("ALTextToSpeech", NIp,PORT)markProxy = naoqi.ALProxy("ALLandMarkDetection", NIp, PORT)animatedMode = naoqi.ALProxy("ALAutonomousLife", NIp, PORT)def main():    reps = 0    startUp()    recCan()    data = findInitialLM(1)    moveCoords = orient(data, data[1][0][1][0])    print "LM: " + str(data[1][0][1][0])    #print moveCoords    while moveCoords.r1_c4 > .7:        moveCoords = orient(data, data[1][0][1][0])        if moveCoords.r1_c4 >.7:            moveLM(moveCoords.r1_c4, moveCoords.r2_c4, data[1][0][1][0])        print str(reps) + " : " + str(moveCoords.r1_c4)        data = findLM(moveCoords.r2_c4)        reps += 1    dropCan(orient(data, data[1][0][1][0]).r2_c4)def startUp():    state = "disabled"    if animatedMode.getState() != state:        animatedMode.setState(state)    motion.setStiffnesses("Body", 1.0)    id = posture.goToPosture("Crouch", 1.0)    posture.wait(id, 0)    id = posture.goToPosture("Stand", 1.0)    posture.wait(id, 0)    motion.setAngles("HeadYaw", 0.0, .1)    motion.setAngles("HeadPitch", .2, .1)def recCan():    LSP = "LShoulderPitch"    LWY = "LWristYaw"    motion.setAngles(LSP, 0.0, 1.0)    motion.setAngles(LWY, -1.5, .1)    motion.post.openHand("LHand")    time.sleep(3)    motion.post.closeHand("LHand")    time.sleep(1)    motion.setAngles(LSP, 1.0, 0.1)    time.sleep(1)    motion.setMoveArmsEnabled(False, True)    time.sleep(.1)def findLM(y):    # Subscribe to the ALLandMarkDetection extractor    markProxy.subscribe("Test_Mark", period, 0.0)    # Create a proxy to ALMemory.    memProxy = naoqi.ALProxy("ALMemory", NIp, PORT)    if y >= 0:        a = 1    else:        a = -1    # Get data from landmark detection (assuming landmark detection has been activated).    data = None    count = 0    while not data and count < 20:        data = memProxy.getData("LandmarkDetected")        count += 1    if count >= 20:        #id = motion.post.moveTo(0., a * .1, 0)        #motion.wait(id, 0)        data = findInitialLM(a)    return datadef orient(data, LMNum):    #actual landmark size    print "landMark" + str(LMNum)    if LMNum == 130:        LMSize = .178    else:        LMSize = .105    #camera in use    currentCamera = "CameraTop"    #landmark position in relation to camera in radians    zCamera = data[1][0][0][1]    yCamera = data[1][0][0][2]    #angular size of the landmark in radians along the x-axis    angularSize = data[1][0][0][3]    #distance from the top camera to the landmark    distCtoLM = LMSize / (2 * math.tan(angularSize/2))    #camera position in NAO space    transform = motion.getTransform(currentCamera, 2, True)    transformList = almath.vectorFloat(transform)    mixoToCamera = almath.Transform(transformList)    #rotation to point at LM    rotTransform = almath.Transform_from3DRotation(0, yCamera, zCamera)    #translation to langmark    transTransform = almath.Transform(distCtoLM, 0, 0)    #combine everything    mixoToLM = mixoToCamera * rotTransform * transTransform    return mixoToLMdef moveLM(a, b, c):    print "Initial x: " + str(a)    if c == 130:        d = .48    else:        d = .2    motion.moveInit()    #print a    a = math.sqrt(a**2 - d**2)    print "x: " + str(a)    print "y: " + str(b)    id = motion.post.moveTo(0.0, 0.0, b)    motion.wait(id, 0)    id = motion.post.moveTo(a/4, 0.0, 0.0)    motion.wait(id, 0)    #motion.rest()def dropCan(k):    data = None    print "K: " + str(k)    motion.setStiffnesses("Body", 1.0)    if k > .1 or k < -.1:        motion.moveInit()        id = motion.post.moveTo(0.0,k,0.0)        motion.wait(id,0)            while not data or data[1][0][1][0] != 170:        data = findLM(k)    #print data    if data[1][0][1][0] == 170:        motion.moveInit()        coords = orient(data, 170)        dToR = coords.r1_c4        print "dToR: " + str(dToR)        if dToR < .4:            print "Trishunia"            id = motion.post.moveTo(dToR - .4, 0.0, 0.0)            motion.wait(id, 0)            id = motion.post.setAngles("LShoulderPitch", -.5, .1)            motion.wait(id, 0)            id = motion.post.setAngles("LWristYaw", 0.0, .1)            motion.wait(id, 0)            data = None            id = motion.post.moveTo(0.0, 0.0, coords.r2_c4)            motion.wait(id, 0)            id = motion.post.moveTo(.35, 0.0, 0.0)            motion.wait(id, 0)            data = None            id = motion.post.moveTo(0.0, 0.0, coords.r2_c4)            motion.wait(id, 0)        else:            print "Jarfield"            id = motion.post.setAngles("LShoulderPitch", -.5, .1)            motion.wait(id, 0)            id = motion.post.setAngles("LWristYaw", 0.0, .1)            motion.wait(id, 0)            id = motion.post.moveTo(0.0, 0.0, coords.r2_c4)            motion.wait(id, 0)            id = motion.post.moveTo((dToR - .4), 0.0, 0.0)            motion.wait(id, 0)            data = None            id = motion.post.moveTo(0.0, 0.0, coords.r2_c4)            motion.wait(id, 0)    id = motion.post.setAngles("LShoulderPitch", 0.0, .1)    motion.wait(id, 0)    id = motion.post.openHand("LHand")    motion.wait(id, 0)    tts.say("Suck it, bitches!")    id = motion.post.moveTo(-.2, 0, 0)    motion.wait(id, 0)    motion.rest()        def findInitialLM(a):    # Subscribe to the ALLandMarkDetection extractor    a = a * .5    motion.setStiffnesses("Body", 1.0)    motion.moveInit()    markProxy.subscribe("Test_Mark", period, 0.0)    # Create a proxy to ALMemory.    memProxy = naoqi.ALProxy("ALMemory", NIp, PORT)    # Get data from landmark detection (assuming landmark detection has been activated).    data = None    while not data:        for i in range(10):            data = memProxy.getData("LandmarkDetected")            if data:                break        if not data:            id = motion.post.moveTo(0.0, 0.0, a)            motion.wait(id, 0)    return data    main()